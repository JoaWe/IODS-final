lrn14$gender
summary(lrn14$gender)
lrn14$Age
summary(lrn14$Age)
lrn14$Points
summary(lrn14$Points)
?write.csv
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.
#the data dimension:
dim(lrn14)
learning2014 <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv", header=TRUE)
student_math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv", header=TRUE)
student_math
summary(student_math)
str(student)
dim(student_math)
<-math  <-math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student_mat.csv", header=TRUE)
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student_mat.csv", header=TRUE)
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv", header=TRUE)
str(math)
dim(math)
<- por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv", header=TRUE)
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv", header=TRUE)
str(por)
dim(por)
# a) Reading dataset "student-mat" into R from  project-folder:
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv", header=TRUE)
str(math)
dim(math)
# a) Reading dataset "student-mat" into R from project-folder:
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv",sep = ";",  header=TRUE)
str(math)
dim(math)
## b) Reading dataset "student-por" into R from project-folder:
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv",sep = ";", header=TRUE)
str(por)
dim(por)
#Quick look at the column-names:
colnames(math)
#Quick look at the column-names:
colnames(por)
#Accessing dplyr-library:
library(dplyr)
# common columns by which the datasets are to be joined:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Joining he two datasets:
math_por <- inner_join(math, por, by = join_by, suffix = c (".math", ".por"))
# looking at the new column names
colnames(math_por)
# glimpse at the data
glimpse(math_por)
str(math_por)
dim(math_por)
## Creating the new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
str(alc)
dim(alc)
## Reading dataset "student-mat" into R from project-folder:
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv",sep = ";",  header=TRUE)
str(math)
dim(math)
#Quick look at the column-names:
colnames(math)
## Reading dataset "student-por" into R from project-folder:
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv",sep = ";", header=TRUE)
str(por)
dim(por)
#Quick look at the column-names:
colnames(por)
#Accessing dplyr-library:
library(dplyr)
# common columns by which the datasets are to be joined:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Joining he two datasets:
math_por <- inner_join(math, por, by = join_by, suffix = c (".math", ".por"))
# looking at the new dataset
colnames(math_por)
glimpse(math_por)
str(math_por)
dim(math_por)
## Creating the new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# for every column name not used for joining...
for(column_name in alc) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
## Reading dataset "student-mat" into R from project-folder:
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv",sep = ";",  header=TRUE)
str(math)
dim(math)
#Quick look at the column-names:
colnames(math)
## Reading dataset "student-por" into R from project-folder:
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv",sep = ";", header=TRUE)
str(por)
dim(por)
#Quick look at the column-names:
colnames(por)
#Accessing dplyr-library:
library(dplyr)
#Joining he two datasets:
math_por <- inner_join(math, por, by = join_by, suffix = c (".math", ".por"))
# looking at the new dataset
colnames(math_por)
glimpse(math_por)
# common columns by which the datasets are to be joined:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
## Reading dataset "student-por" into R from project-folder:
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv",sep = ";", header=TRUE)
str(por)
dim(por)
#Quick look at the column-names:
colnames(por)
#Accessing dplyr-library:
library(dplyr)
# common columns by which the datasets are to be joined:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Joining he two datasets:
math_por <- inner_join(math, por, by = join_by, suffix = c (".math", ".por"))
## Reading dataset "student-mat" into R from project-folder:
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv",sep = ";",  header=TRUE)
str(math)
dim(math)
#Quick look at the column-names:
colnames(math)
## Reading dataset "student-por" into R from project-folder:
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv",sep = ";", header=TRUE)
str(por)
dim(por)
#Quick look at the column-names:
colnames(por)
#Accessing dplyr-library:
library(dplyr)
# common columns by which the datasets are to be joined:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Joining he two datasets:
math_por <- inner_join(math, por, by = join_by, suffix = c (".math", ".por"))
# looking at the new dataset
colnames(math_por)
glimpse(math_por)
str(math_por)
dim(math_por)
## Creating the new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
str(alc)
dim(alc)
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
dim(alc)
View(alc)
## Reading dataset "student-mat" into R from project-folder:
math <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-mat.csv",sep = ";",  header=TRUE)
str(math)
dim(math)
#Quick look at the column-names:
colnames(math)
## Reading dataset "student-por" into R from project-folder:
por <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\student-por.csv",sep = ";", header=TRUE)
str(por)
dim(por)
#Quick look at the column-names:
colnames(por)
#Accessing dplyr-library:
library(dplyr)
# common columns by which the datasets are to be joined:
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
#Joining he two datasets:
math_por <- inner_join(math, por, by = join_by, suffix = c (".math", ".por"))
# looking at the new dataset
colnames(math_por)
glimpse(math_por)
str(math_por)
dim(math_por)
## Creating the new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
str(alc)
dim(alc)
# Keep only the students present in both data sets:
new_alc <- filter(alc, math == por)
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
str(alc)
dim(alc)
colnames(alc)
## Defining the new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
View(alc)
## Defining a new column "high_use", which is TRUE for students for which 'alc_use' is greater than 2 (and FALSE otherwise)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
dim(alc)
## Creating the csv-file:
write.csv(alc, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\alc.csv",row.names = FALSE)
alc <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-project\\data\\alc.csv", header=TRUE)
summary(alc)
View(math)
View(alc)
#Accessing the necessary libraries:
library(dplyr)
library(stringr)
# Choosing and loading the datasets "human development (hd)" and "gender inequality index (gii)":
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# taking a look at their structures and dimensions:
str(hd)
dim(hd)
# The dataset contains a total of 8 variables and 195 observations.
# The variables are: HDI.Rank, Country, Human.Development.Index..HDI., Life.Expectancy.at.Birth, Expected.Years.of Education, Mean.Years.of.Education, Gross.National.Income..GNI..per.Capita, GNI.per.Capita.Rank.Minus.HDI.Rank
str(gii)
dim(gii)
# The dataset contains a total 10 variables and 195 observations.
# The variables are: GII.Rank, Country, Gender.Inequality.Index..GII., Maternal.Mortality.Ratio, Adolescent.Birth.Rate, Percent.Representation.in.Parliament, Population.with.Secondary.Education..Female., Population.with.Secondary.Education..Male., Labour.Force.Participation.Rate..Female., Labour.Force.Participation.Rate..Male.
#In order to continue it makes sense to shorten the names of the variables (the variable "Country" will not be changed):
# HDI.Rank - HDIR
colnames(hd)[1] <- "HDIR"
# Human.Development.Index..HDI. - HDI
colnames(hd)[3] <- "HDI"
# Life.Expectancy.at.Birth - Life_Exp
colnames(hd)[4] <- "Life_Exp"
# Expected.Years.of Education - Exp_Edu
colnames(hd)[5] <- "Exp_Edu"
# Mean.Years.of.Education - Mean_Edu
colnames(hd)[6] <- "Mean_Edu"
# Gross.National.Income..GNI..per.Capita - GNI
colnames(hd)[7] <- "GNI"
# GNI.per.Capita.Rank.Minus.HDI.Rank - Diff_GNI_HDI
colnames(hd)[8] <- "Diff_GNI_HDI"
# GII.Rank - RGII
colnames(gii)[1] <- "RGII"
# Gender.Inequality.Index..GII. - GII
colnames(gii)[3] <- "GII"
# Maternal.Mortality.Ratio - MMR
colnames(gii)[4] <- "MMR"
# Adolescent.Birth.Rate - ABR
colnames(gii)[5] <- "ABR"
# Percent.Representation.in.Parliament - PRP
colnames(gii)[6] <- "PRP"
# Population.with.Secondary.Education..Female. - sec_Edu_F
colnames(gii)[7] <- "sec_Edu_F"
# Population.with.Secondary.Education..Male - sec_Edu_M
colnames(gii)[8] <- "sec_Edu_M"
# Labour.Force.Participation.Rate..Female. - LF_F
colnames(gii)[9] <- "LF_F"
# Labour.Force.Participation.Rate..Male. - LF_M
colnames(gii)[10] <-"LF_M"
# Checking the new variable-names:
colnames(hd)
colnames(gii)
# creating new variables by combining sec_Edu_F & sec_Edu_M, as well as LF_F & LF_M:
sec_Edu <- gii$sec_Edu_F/gii$sec_Edu_M
LF <- gii$LF_F/gii$LF_M
# inclusion in dataset:
gii$sec_Edu <- sec_Edu
gii$LF <- LF
colnames(gii)
# The variable "Country" exists in both datasets, and can therefore ideally be used to combine the datasets into one.
fa_human <- inner_join(hd, gii, by = c("Country"))
dim(fa_human)
colnames(fa_human)
# The newly combined dataset now contains 195 observations (as before) and 17 variables (8 + 10 - 1xCountry)
# Setting the working directory to the data-folder within the IODS-final folder:
setwd("C:\\Users\\Ani\\Documents\\GitHub\\IODS-final")
# Saving the dataset:
write.csv(fa_human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-final\\fa_human.csv")
#The dataset with this number of variables now contains quite a number of variables. It therefore makes sense to "drop" those that do not serve the purpose of this project.
fa_human <- read.csv("C:\\Users\\Ani\\Documents\\GitHub\\IODS-final\\fa_human.csv")
# Looking at the variable GNI (as I remember from exercise 5 that it was not numeric):
summary(fa_human$GNI)
# The variable is represented by characters and would need to be numeric for further use.
# Changing the variable to numeric:
str_replace(fa_human$GNI, pattern = ",", replace = "") %>% as.numeric(fa_human$GNI)
fa_human$GNI <- as.numeric(fa_human$GNI)
summary(fa_human$GNI)
# Excluding the unnecessary variables:
# 1. by defining the columns that need to be kept:
keep <- c("Country", "Life_Exp", "Exp_Edu", "GNI", "MMR", "ABR", "PRP", "sec_Edu", "LF")
# 2. by using the dplyr-select function:
fa_human <- dplyr::select(fa_human, one_of(keep))
# checking the variables:
glimpse(fa_human)
# For the time being, I have 195 observations and 9 variables.
# checking for missing data:
data.frame(fa_human[-1], comp = complete.cases(fa_human))
fa_human <- filter(fa_human,complete.cases(fa_human))
data.frame(fa_human[-1], comp = complete.cases(fa_human))
# As the final seven "Country" observations are regions, I will exclude the rows belonging to them:
fa_human$Country
last <- nrow(fa_human) - 7
fa_human <- fa_human[1:last,]
fa_human$Country
# Defining countrynames as rownames:
rownames(fa_human) <- fa_human$Country
#removing the variable "Country" as their identification as the rownmanes should suffice:
fa_human <- dplyr::select(fa_human, -Country)
colnames(fa_human)
## the variable has been removed.
# sorting the dataset by GNI:
## printing the column fa_human$GNI:
fa_human$GNI
## sorting rows by GNI using dplyr::arrange:
dplyr::arrange(fa_human, -GNI)
# renewed setting the working directory to the data-folder within the IODS-final folder:
setwd("C:\\Users\\Ani\\Documents\\GitHub\\IODS-final")
# renewed saving the dataset:
write.table(fa_human, file = "C:\\Users\\Ani\\Documents\\GitHub\\IODS-final\\fa_human.csv", sep = ",", row.names = TRUE)
# fitting the logistic model:
Life_MDeath_expo <- glm(MMR ~ sec_Edu + Exp_Edu, data = fa_human, family = "binomial")
# accessing libraries
library(dplyr)
# loading human:
fa_human <- read.table("C:\\Users\\Ani\\Documents\\GitHub\\IODS-final\\fa_human.csv", sep = ",", header = TRUE, row.names = 1)
# fitting the logistic model:
Life_MDeath_expo <- lm(MMR ~ sec_Edu + Exp_Edu, data = fa_human)
# Printing the model's summary
summary(Life_MDeath_expo)
library(GGally)
library(ggplot2)
library(tidyr)
#plotting Life_MDeath_expo
pairs(fa_human)
par(mfrow = c(2,2))
plot(fa_human, which = c(1,2,5))
# fitting the logistic model:
Life_MDeath_expo <- glm(MMR ~ sec_Edu + Exp_Edu, data = fa_human)
# Printing the model's summary
summary(Life_MDeath_expo)
# fitting the logistic model:
Life_MDeath_log <- glm(MMR ~ Life_Exp, data = fa_human)
# Printing the model's summary
summary(Life_MDeath_log)
# Accessing libraries:
library(tidyr)
# fitting the logistic model:
Life_MDeath_log <- glm(MMR ~ Life_Exp, data = fa_human)
# Printing the model's summary
summary(Life_MDeath_log)
# Accessing libraries:
library(tidyr)
# fitting the logistic model:
Life_MDeath_log <- glm(MMR ~ Life_Exp, data = fa_human)
# Printing the model's summary
summary(Life_MDeath_log)
# Accessing libraries:
library(tidyr)
# fitting the logistic model:
Edu_MDeath_expo <- glm(MMR ~ sec_Edu + Exp_Edu, data = fa_human)
# Printing the model's summary
summary(Edu_MDeath_expo)
# center and standardize variables
fa_human_scaled <- scale(fa_human)
# summaries of the scaled variables
summary(fa_human_scaled)
# class of the boston_scaled object
class(fa_human_scaled)
# change the object to data frame
fa_human_scaled <- as.data.frame(fa_human_scaled)
# summary of the scaled crime rate
summary(fa_human_scaled$GNI)
bins <- quantile(fa_human_scaled$GNI)
bins
gni <- cut(fa_human_scaled$GNI, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(gni)
# summary of the scaled crime rate
summary(fa_human_scaled$PRP)
# create a quantile vector of GNI and print it
bins <- quantile(fa_human_scaled$PRP)
bins
# creating a categorical variable 'gni'
prp <- cut(fa_human_scaled$PRP, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(prp)
# summary of the scaled crime rate
summary(fa_human_scaled$LF)
# create a quantile vector of GNI and print it
bins <- quantile(fa_human_scaled$LF)
bins
# creating a categorical variable 'lf'
lf <- cut(fa_human_scaled$lf, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# summary of the scaled crime rate
summary(fa_human_scaled$Life_Exp)
# create a quantile vector of GNI and print it
bins <- quantile(fa_human_scaled$Life_Exp)
bins
# creating a categorical variable 'Life_Exp'
l_exp <- cut(fa_human_scaled$Life_Exp, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(l_exp)
# summary of the scaled life-expectancy
summary(fa_human_scaled$Life_Exp)
# create a quantile vector of Life_Exp and print it
bins <- quantile(fa_human_scaled$Life_Exp)
bins
# creating a categorical variable 'l_exp'
l_exp <- cut(fa_human_scaled$Life_Exp, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor l_exp
table(l_exp)
# remove original crim from the dataset
fa-human_scaled <- dplyr::select(fa_human_scaled, -Life_Exp)
# remove original crim from the dataset
fa_human_scaled <- dplyr::select(fa_human_scaled, -Life_Exp)
# change the object to data frame
fa_human_scaled <- as.data.frame(fa_human_scaled)
# summary of the scaled life-expectancy
summary(fa_human_scaled$Life_Exp)
# create a quantile vector of Life_Exp and print it
bins <- quantile(fa_human_scaled$Life_Exp)
bins
# creating a categorical variable 'l_exp'
l_exp <- cut(fa_human_scaled$Life_Exp, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# summary of the scaled crime rate
summary(fa_human_scaled$Life_Exp)
# create a quantile vector of crim and print it
bins <- quantile(fa_human_scaled$Life_Exp)
bins
# create a categorical variable 'crime'
l_exp <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# summary of the scaled crime rate
summary(fa_human_scaled$GNI)
# create a quantile vector of crim and print it
bins <- quantile(fa_human_scaled$GNI)
bins
# create a categorical variable 'crime'
gni <- cut(fa_human_scaled$GNI, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(gni)
# remove original crim from the dataset
fa_human_scaled <- dplyr::select(fa_human_scaled, -GNI)
# add the new categorical value to scaled data
fa_human_scaled <- data.frame(fa_human_scaled, gni)
# number of rows in the scaled dataset:
n <- nrow(fa_human_scaled)
# Choose 75% of the rows
ind <- sample(n, size = n*0,75)
# creating the trainset:
train <- fa_human_scaled[ind,]
# creating the testset:
test <- fa_human_scaled[-ind,]
# saving the correct cclasses from the test data:
correct_classes <- test$gni
#removing the gni-variable from the testset:
test <- dplyr::select(test, -gni)
# linear discriminant analysis:
lda.fit <- lda(gni~., data = train)
# Accessing library corrplot:
library(corrplot)
lda.fit <- lda(gni~., data = train)
library(tidyr)
lda.fit <- lda(gni~., data = train)
library(dplyr)
lda.fit <- lda(gni~., data = train)
# Accessing library corrplot:
library(CRAN)
library.package(CRAN.packages)
?library
library()
install.packages("cran")
install.packages("CRAN")
# Accessing library corrplot:
library(MASS)
# linear discriminant analysis:
lda.fit <- lda(gni~., data = train)
